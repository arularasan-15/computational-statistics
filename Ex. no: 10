import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min
data, _ = make_blobs(n_samples=200, centers=4, cluster_std=1.0, random_state=42)
scaler = StandardScaler()
data_standardized = scaler.fit_transform(data)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.scatter(data[:, 0], data[:, 1], color='blue', edgecolor='k', s=50)
plt.title("Original Data Plot")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.subplot(1, 2, 2)
plt.scatter(data_standardized[:, 0], data_standardized[:, 1], color='purple', edgecolor='k', s=50)
plt.title("Standardized Data Plot")
plt.xlabel("Standardized Feature 1")
plt.ylabel("Standardized Feature 2")
plt.show()
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(data_standardized)
plt.figure(figsize=(8, 6))
plt.scatter(data_standardized[:, 0], data_standardized[:, 1], c=clusters, cmap='viridis', edgecolor='k', s=50)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='X', s=200, label='Centers')
plt.title("Scatter Plot of Clusters with Centers (k=3)")
plt.xlabel("Standardized Feature 1")
plt.ylabel("Standardized Feature 2")
plt.legend()
plt.show()
wcss = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_standardized)
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(8, 6))
plt.plot(k_range, wcss, marker='o')
plt.title("Elbow Graph for Identifying Optimal K")
plt.xlabel("Number of Clusters (K)")
plt.ylabel("Within-Cluster Sum of Squares (WCSS)")
plt.show()
optimal_k = 4
kmeans_optimal = KMeans(n_clusters=optimal_k, random_state=42)
clusters_optimal = kmeans_optimal.fit_predict(data_standardized)
plt.figure(figsize=(8, 6))
plt.scatter(data_standardized[:, 0], data_standardized[:, 1], c=clusters_optimal, cmap='plasma', edgecolor='k', s=50)
plt.scatter(kmeans_optimal.cluster_centers_[:, 0], kmeans_optimal.cluster_centers_[:, 1], c='red', marker='X', s=200, label='Centers')
plt.title(f"Scatter Plot of Clusters with Centers (k={optimal_k})")
plt.xlabel("Standardized Feature 1")
plt.ylabel("Standardized Feature 2")
plt.legend()
plt.show()
